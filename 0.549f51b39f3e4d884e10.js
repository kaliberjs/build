(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,function(e,n,t){"use strict";var o=t(21),a=t.n(o);t.d(n,"a",(function(){return a.a}));var r=t(22),i=t.n(r);t.d(n,"j",(function(){return i.a}));var s=t(23),l=t.n(s);t.d(n,"f",(function(){return l.a}));var c=t(24),d=t.n(c);t.d(n,"e",(function(){return d.a}));t(25);var h=t(26),u=t.n(h);t.d(n,"h",(function(){return u.a}));var p=t(27),m=t.n(p);t.d(n,"k",(function(){return m.a}));var f=t(28),y=t.n(f);t.d(n,"l",(function(){return y.a}));var g=t(29),b=t.n(g);t.d(n,"c",(function(){return b.a}));var w=t(30),v=t.n(w);t.d(n,"m",(function(){return v.a}));var j=t(31),k=t.n(j);t.d(n,"b",(function(){return k.a}));var x=t(32),S=t.n(x);t.d(n,"d",(function(){return S.a}));var T=t(33),_=t.n(T);t.d(n,"g",(function(){return _.a}));var I=t(34),A=t.n(I);t.d(n,"i",(function(){return A.a}))},,,,,,function(e,n){e.exports={container:"_187f4070fbb36b279519bc62ff842f20",sidebar:"d4bebdcf36452ba92c2c4c81fcf2871c",content:"b4c8f89d956dae28a32a101d09138341",active:"fed8a1022fff62f1747eb0328c82bd4b",cssHash:"310e547b4215513d12025b76d93501b5"}},,function(e,n,t){"use strict";(function(e){t.d(n,"a",(function(){return i}));var o=t(13),a=t(7),r=t.n(a);function i(n){var t=n.title,a=n.to,i=n.active;return e.createElement(o.a.Consumer,null,(function(n){return e.createElement("a",{href:"".concat(n).concat(a.slice(1)),onClick:s,className:i?r.a.active:null},t)}));function s(e){e.preventDefault(),window.history.pushState(null,t,e.currentTarget.href)}}}).call(this,t(0))},,,,function(e,n,t){"use strict";(function(e){n.a=e.createContext()}).call(this,t(0))},,,,,,,,function(e,n){e.exports="## Basic authentication\n\nWe often lock down our sites that should not yet be in production or that serve another purpose\n(test or acceptance) to prevent indexation and other unwanted uses.\n\nThe server from this library can be configured using the following configuration:\n\n```js\nconst basicAuth = require('express-basic-auth')\n\nmodule.exports = {\n  kaliber: {\n    serveMiddleware: basicAuth({\n      challenge: true,\n      realm: 'your site',\n      users: {\n        kaliber: 'making sense for future proof brands',\n        username: 'password'\n      }\n    })\n  }\n}\n```\n\nIf you want to secure only a specific path:\n\n```js\nconst basicAuth = require('express-basic-auth')\n\nmodule.exports = {\n  kaliber: {\n    serveMiddleware: ['/protected-path', basicAuth({ ... })]\n  }\n}\n```\n"},function(e,n){e.exports="## Server side rendering\n\nOn one side of the spectrum you have [static sites](/how-to/static-site), on the other side you have\nserver side rendering (or dynamic sites). The core of the idea here is that you take data from a\ndatasource and render it on the server.\n\nIt is recommended to read the documentation about [static sites](/how-to/static-site) to learn more\nabout modular and non-modular CSS. It also explains how to add interaction with javascript.\n\nFor this library server side rendering means two things:\n1. Instead of creating rendered template during build we provide a function that takes data and\n   returns a response.\n2. Along with the function we provide another function that takes the request and determines the\n   status code, headers and data for the response.\n\nThe provided mechanism was created to be used with the built-in server, but that is not a hard\nrequirement. Any node.js server can be used to execute the compiled functions.\n\n{toc}\n\n\n### Creating the template\n\nThe convention we use for creating a dynamic template (versus a static template) is: return a\nfunction value. An example:\n\n`src/index.html.js`\n```jsx\nreturn function index({ location }) {\n  return (\n    <html>\n      <head></head>\n      <body>\n        <p>Hello world at {location.pathname}</p>\n      <body>\n    </html>\n  )\n}\n```\n\nAs you can see the library performs the following tasks:\n- picks up the `{name}.html.js` file\n- detects it is a function\n- grabs the registered `html` renderer and prepares it with the file\n- emits a `{name}.html.js` file that essentially contains a function like this:\n  `props => render(template(props))`\n\n\n### Use with the built-in server\n\nWe went one step further with our library to provide an out-of-the box package that can be used to\ndo real world server side rendering. Feel free to look at the code of `serve.js` and roll your\nown if you don't agree with our conventions here, it's not very complicated.\n\nA basic template to be used with the built-in server looks like this:\n\n```jsx\nindex.routes = {\n  match: async location => {\n    try {\n      if (location.pathname.startsWith('/fetch')) {\n        const content = await fetchData(...)\n        const missing = !content\n        return { status: missing ? 404 : 200, data: { missing, content } }\n      }\n      return { status: 404, data: { missing: true } }\n    } catch (e) {\n      return { status: 500, data: { error: true } }\n    }\n  }\n}\n\nexport default function index({ location, data }) {\n  const { error, missing, content } = data\n  return (\n    <html>\n      <head></head>\n      <body>\n        {error\n          ? '500 - error'\n          : missing\n          ? '404 - not found'\n          : <p>{content}</p>\n        }\n      </body>\n    </html>\n  )\n}\n```\n\nThe server checks the existence of a `routes` object on the function returned from `index.html.js`\nand calls it's `match` function. The result of this function is used to set the `status` of http\nresponse and the `data` is supplied to the template function.\n\nNote that the location object is provided by a utility from the [`history`](https://www.npmjs.com/package/history)\npackage. This library could be used to provide client side routing.\n\n\n### When to use\n\nThis type of site it used for a site that wants to render something based on information from a\ndatasource that changes independently of your code. If this datasource changes in step with your\ncode, you might be better off creating a static site (build time rendering).\n\nContent sites with data from a database, like a CMS, are good candidates for server side rendering.\n\nIf you have something that requires a login, a single page application might be your best choice.\n\n\n### Routing\n\nWe made the conscious choice to keep server and client side routing separate. This allows for an\neasy mental model while still giving enough freedom for users to pick any routing mechanism.\n\nWe have not settled for library that we want to use for routing and we might want to roll our own,\nit will however not be part of this library.\n\n#### match\n\nThe match function signature is as follows:\n\n```\n(location: HistoryLocation, req: ExpressRequest) =>\n  { status: Number, data?: Any, headers?: { [Name: String]: String } }\n```\n\nIn most cases you do not need the `req` from express, we however provide it in case you do need it.\n\nThe `headers` can be used to supply a specific content type or to perform redirects.\n\nNote that if you return a 'falsy' response from the `match` method, or don't supply a `match` method\nat all it will default to `{ status: 200, data: null }`.\n\n#### redirects\n\nRedirects are nothing more than a status code in the [`3XX`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3)\nrange combined with a `Location` header.\n\nIf you are concerned with SEO, please read about to the status codes to figure out which one to use.\n\n### Use without the built-in server\n\nThe server we provide is very lightweight and designed to push people into using a specific style\nof coding. It is our vision that the node.js server used to supply the browser with content should\nnot do any other backend specific tasks.\n\nWe however understand that this is a very company specific choice. So don't feel bad if you do not\nwant to use our supplied server. The fact that our server has nothing to do with hot reloading makes\nit very easy to roll your own.\n\nThe system of template renderers is very powerful and the generated template function is partially\napplied with the specific template renderer. This means you can call the template function with\nparameters and the result is passed throught the specific template renderer.\n\n```\nprops => render(template(props))\n```\n\nYou could say the renderer is injected into the template function.\n"},function(e,n){e.exports="## Page in sub directory\n\nSometimes you are asked to create an application that will live in the sub directory of another\nsite.\n\nTo do that, just supply the `publicPath` configuration:\n\n`config/default.js`\n```js\nmodule.exports = {\n  kaliber: {\n    publicPath: '/directory/'\n  }\n}\n```\n"},function(e,n){e.exports="## Mail templates\n\nWe use React to generate our mail templates. We do that with the help of [`mjml`](https://mjml.io).\n\n{toc}\n\n### Configure custom renderer\n\n`config/default.js`\n```js\nmodule.exports = {\n  kaliber: {\n    templateRenderers: {\n      mjml: '/mjml-renderer'\n    }\n  }\n}\n```\n\nWe tell the build tool to render `{name}.mjml.js` files with the `src/mjml-renderer.js` renderer.\n\n### Create mjml renderer\n\nWe first render React to mjml and then render that result to html.\n\n`src/mjml-renderer.js`\n```js\nimport { mjml2html } from 'mjml'\nimport htmlReactRenderer from '@kaliber/build/lib/html-react-renderer'\n\nexport default function mjmlRenderer(template) {\n  const { html, errors } = mjml2html(htmlReactRenderer(template))\n\n  if (errors.length > 0) throw new Error(errors.map(e => e.formattedMessage).join('\\n'))\n\n  return html\n}\n```\n\n### Create a template\n\n`static.mjml.js`\n```js\nexport default (\n  <mjml>\n    <mj-head />\n    <mj-body>\n      <mj-container>\n        <mj-section>Text</mj-section>\n      </mj-container>\n    </mj-body>\n  </mjml>\n)\n```\n\nThe above example results in a `static.mjml` file that contains the html that can be used for the\ne-mail. In most cases however you want your e-mail to contain dynamic data.\n\n`dynamic.mjml.js`\n```js\nexport default function dynamic(props) {\n  const { content } = props\n  return (\n    <mjml>\n      <mj-head />\n      <mj-body>\n        <mj-container>\n          <mj-section>{content}</mj-section>\n        </mj-container>\n      </mj-body>\n    </mjml>\n  )\n}\n```\n\nThis results in a `dynamic.mjml.js` file that exports a function which, when given\n`{ content: '...' }` returns the mjml generated html string. This function can be used to generate\nan e-mail from a node.js process.\n"},function(e,n){e.exports="## React router\n\nOur server was not designed to be a very good fit for React router. We do believe the way React\nrouter handles itself in the client is the way to go (the React way - V4). We are however not\ncompletely convinced you would need the React router library to do that way of routing. In most\ncases a simple if statement or some regular expressions will be fine.\n\nWe do not believe that the routes on the client should be the same as the ones on the server. Or\nmore specifically, we do not believe the routes on the server should have the same granularity as\nthe routes on the client.\n\nThe server should fetch the main content of a page and respond with a `404` if that content is not\npresent. Any other details should be handled in the client (extra information, showing a certain\ntab, ...).\n\nIn any case, if you do not want to roll your own server and really want to use React router, here\nis how you could do it.\n\n`src/index.html.js`\n```jsx\nimport ReactDOMServer from 'react-dom/server'\nimport { StaticRouter } from 'react-router'\n\nimport App from '/App?universal'\n\nindex.routes: {\n  match: location => {\n    const context = {}\n    const app = ReactDOMServer.renderToString(\n      <StaticRouter location={location} context={context}>\n        <App/>\n      </StaticRouter>\n    )\n    const headers = context.url ? { Location: context.url } : {}\n    const status = context.status\n    return { status, headers, data: { app } }\n  }\n}\n\nexport default function index({ location, data: { app } }) {\n  return (\n    <html>\n      <head />\n      <body>\n        <div dangerouslySetInnerHTML={{ __html: app }} />\n      </body>\n    </html>\n  )\n}\n```\n\n`src/App.js`\n```jsx\nimport { BrowserRouter } from 'react-router-dom'\n\nexport default class App extends Component {\n\n  render() {\n    return this.isMounted\n      ? <BrowserRouter><ActualApp /></BrowserRouter>\n      : <ActualApp />\n  }\n\n  componentDidMount() {\n    this.isMounted = true\n  }\n}\n```\n\nOnce you start loading data and combine it with server side rendering things become a bit messy. It\nessentially requires you to define routes outside of your component structure and define how they\nshould load data. Read more about that here: [react-router/server-rendering/data-loading](https://reacttraining.com/react-router/web/guides/server-rendering/data-loading).\n\nOnce you go down this path you will probably come to a similar guideline:\n\n> 404 and redirects are determined by either a non-existing route or missing data\n\nThis means you need 2 pieces of knowledge:\n1. The valid endpoints\n2. The availability of data at such an endpoint\n\nTo us rendering the application is not the best approach to find that out. This knowledge however\ncan be made available to the client when it should take over. You can simply extract that knowledge\nto a separate file and import it.\n\n[Isomorphic (Universal) javascript](/how-to/isomorphic-javascript) goes into some of the details\nregarding this topic.\n"},function(e,n){e.exports="## Redirects\n\nRedirects are nothing more than a status code in the [`3XX`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3)\nrange combined with a `Location` header.\n\nIf you are concerned with SEO, please read about to the status codes to figure out which one to use.\n\n{toc}\n\n### router\n\nYou can use the router to perform redirects:\n\n```js\nindex.routes = {\n  match: location => {\n    if (location.pathname === '/old-path') {\n      return { status: 301, headers: { Location: '/new-path' } }\n    }\n  )\n}\n\nexport default function index() {\n  ...\n}\n```\n\n### express middleware\n\nIn some cases you do not need server-side rendering, but you do need redirects. In this case you\ncould configure middleware to perform the redirect:\n\n```js\nmodule.exports = {\n  kaliber: {\n    serveMiddleware: [\n      '/old-path',\n      (req, res) => { res.status(301).set({ Location: '/new-path' }).send() }\n    ]\n  }\n}\n```\n"},function(e,n){e.exports="## Single page application\n\nA single page application is an application that effectively stays on the same html page. It's\nlogic is completely handled by the browser. In most cases the html looks very simple, something\nlike this:\n\n```jsx\n<html>\n  <head />\n  <body>\n    <div id='app' />\n  </body>\n</html>\n```\n\nThe `app` div is then populated using javascript. The only thing required by the server is to serve\nall requests using the `/index.html` page.\n\nIn general this is only advised in two situations:\n- The `app` is locked down using (or hiding behind) a login screen\n- It is a component that has no (or a low) value for indexation by search engines\n- You combine it server side rendered metadata\n\nThe basic implentation of a single page application is described by the following:\n\n> Declare a universal component does not render anything on the server\n\nAn example:\n\n`src/index.html.js`\n```jsx\nimport App from '/App?universal'\n\nexport default (\n  <html>\n    <head />\n    <body><App /></body>\n  </html>\n)\n```\n\n`src/App.js`\n```jsx\nexport default class SinglePageApplication extends Component {\n\n  state = {\n    isMounted: false\n  }\n\n  render() {\n    return isMounted\n      ? <App {...this.props} />\n      : null\n  }\n\n  componentDidMount() {\n    this.setState({ isMounted: true })\n  }\n}\n\nclass App extends Component {\n  ...\n}\n```\n\n{toc}\n\n### Server side rendering with a single page application\n\nThe idea here is that you have a single page application application that lives inside of an html\ndocument for which the metadata does change. With metadata we mean `meta` tags for things like\nFacebook, Google, Twitter, ... And also things like the `title` element or structured data\ndefinition.\n\n```jsx\nimport App from '/App?universal'\n\nindex.routes = {\n  match: async location => {\n    const data = await fetchMetadataForLocation(location)\n    return { data }\n  }\n}\n\nexport default function index({ data }) {\n  return (\n    <html>\n      <head>\n        {renderMetadata(data)}\n      </head>\n      <body>\n        <App />\n      </body>\n    </html>\n  )\n}\n```\n\nThis type of mixture between single page application and server side rendering can be a smart\nchoice. You skip the complexity of universal rendering while providing enough metadata for the url's\nto be shared through social media.\n\n### Status codes\n\nWhen the app is hiding behind a login the value of status codes is very low. So if that is your use-\ncase. Just ignore the status codes.\n\nIf only small parts of your app are single page applications (or maybe we should call them dynamic\ncomponents) status codes can also be ignored.\n\nIf you do have a use case where status codes are important you have two options:\n\n1. Go for server side rendering and ignore its `location` and `data`\n2. Add express middleware using the configuration\n\n### server\n\nThe built-in server will serve a static `index.html` for each request when the following conditions\nare met:\n\n- There is no actual resource with that name\n- There is no `index.html.js`\n- There is no `404.html`\n"},function(e,n){e.exports="## Static site\n\nWith a static site we mean a site where the html is not generated on the server at runtime. You\ncould also call this a compiler generated site as the html template is rendered during the build\nprocess.\n\nThe resulting set of files can be hosted on the most basic systems for hosting as the only\ncapability that is required from the hosting is the ability to serve files.\n\n{toc}\n\n### Creating the template\n\nThe convention we use for creating a static template (versus a dynamic template) is: return a\nnon-function value. An example:\n\n`src/index.html.js`\n```jsx\nimport stylesheet from '@kaliber/build/lib/stylesheet'\nimport styles from '/main.css'\n\nreturn (\n  <html>\n    <head>{stylesheet}</head>\n    <body>\n      <div className={styles.content}>\n        <p>Hello world</p>\n      </div>\n    <body>\n  </html>\n)\n```\n\n`src/main.css`\n```css\n.content {\n  background-color: hotpink;\n}\n```\n\nAs you can see the library performs the following tasks:\n- picks up the `{name}.html.js` file\n- detects it is not a function\n- uses the registered `html` renderer to render the file\n- emits a `{name}.html` file\n\nNote that we use modular CSS, this gives us more freedom in picking class names, we only need make\nsure a class name is unique within a CSS file. The actual class name (some form of unique id) is\nreturned to the javascript and passed to the `className` property. So having a `title` class name\nin different CSS files is no problem at all.\n\n### When to use\n\nThis type of site it used for something that doesn't change a lot as each change requires a new\nbuild. Note that this style of working is currently very popular in the javascript world.\n\nAs soon as you want to render something based on information from a datasource that changes\nindependently of your code, you will probably need server side rendering.\n\nThis type of site is mostly used for action sites and landing pages.\n\n### Non-modular CSS\n\nIn some cases you need to create a static site that some other company wants needs to integrate in\ntheir own system. They will copy and paste your generated html into their own framework to add\ndynamic data.\n\nOr, another use case, the html is more of a style guide and the CSS is the actual end-product.\n\nIn that case you can use the `{name}.entry.css` convention. Modular CSS is disabled for all CSS\nfiles the have the `{name}.entry.css` pattern. Your template would look like this:\n\n`src/index.html.js`\n```jsx\nimport stylesheet from '@kaliber/build/lib/stylesheet'\nimport '/main.entry.css'\n\nreturn (\n  <html>\n    <head>{stylesheet}</head>\n    <body>\n      <div className='content'>\n        <p>Hello world</p>\n      </div>\n    <body>\n  </html>\n)\n```\n\n`src/main.entry.css`\n```css\n.content {\n  background-color: hotpink;\n}\n```\n\nIn this case it's recommended you use a CSS convention for naming your styles.\n\n### Adding javascript\n\nIn most sites we want to use javascript to improve the user experience, or to provide some dynamic\nfeatures like a form.\n\nFor this type of site universal rendering is the way to do it.\n\n`src/index.html.js`\n```jsx\nimport javascript from '@kaliber/build/lib/javascript'\nimport MyInteractiveComponent from '/MyInteractiveComponent?universal'\n\nreturn (\n  <html>\n    <head>{javascript}</head>\n    <body>\n      <MyInteractiveComponent content='Hello world!' />\n    <body>\n  </html>\n)\n```\n\n`src/MyInteractiveComponent.js`\n```js\nexport default class MyInteractiveComponent extends Component {\n\n  state = {\n    content: this.props.content\n  }\n\n  render() {\n    return <p>{this.state.content}</p>\n  }\n\n  componentDidMount() {\n    this.setState({ content: 'This content is set using javascript in the browser' })\n  }\n}\n```\n\nThe `componentDidMount` function is only executed in the browser.\n\n### The server (404 and 500)\n\nThe server this library provides recognizes that static hosting often allows you to provide a custom\n`404` (and sometimes a `500`) page.\n\nWhen you create a `404.html` page, that page will automatically be served in case our server did not\nfind the requested file. The `500.html` is served in case of an unexpected error.\n\nNote that if you do not supply a `404.html`, the `index.html` file is served with status code `200`.\n\n### Static content sites - reducing boilerplate with a custom renderer\n\nIt might be the case that a static site is really your best option, but the amount of pages you need\nto create is quite huge. In this case you can create a custom template renderer to cut down on the\nboilerplate.\n\nThis is just an example, you can get as creative a you would like.\n\n`config/default.js`\n```js\nmodule.exports = {\n  kaliber: {\n    templateRenderers: {\n      html: '/html-renderer'\n    }\n  }\n}\n```\n\nHere we declare a renderer that will be used for any `{name}.html.js` file, effectively overriding\nthe default `html` renderer.\n\n`src/html-renderer.js`\n```jsx\nimport javascript from '@kaliber/build/lib/javascript'\nimport stylesheet from '@kaliber/build/lib/stylesheet'\nimport htmlReactRenderer from '@kaliber/build/lib/htmlReactRenderer'\n\nexport default tplRenderer(template) {\n  if (!template) return template\n\n  const { title, content } = template\n  const page = (\n    <html>\n      <head>\n        {javascript}\n        {stylesheet}\n      </head>\n      <body>\n        <h1>{template.title}</h1>\n        <p>{template.content}<p>\n      </body>\n    </html>\n  )\n\n  return htmlReactRenderer(page)\n}\n```\n\nThis renderer assumes that the template is a javascript object with the properties `title` and\n`content`. It uses that information to construct an html page that is rendered with the built-in\nreact renderer.\n\n`src/content.html.js`\n```js\nexport default {\n  title: 'Awesome content',\n  content: (\n    <>\n      <strong>The world</strong> is a strange place\n    </>\n  )\n}\n```\n\nThe result is a `content.html` file. As you can see this mechanism gives you a lot of options to\nreduce boilerplate.\n"},function(e,n){e.exports="## Isomorphic (Universal) javascript\n\nIsomorphic javascript is javascript that is executed both on the server and client. Server here can\nalso be a build server (or your local machine). A better distinction is code that is run by node.js\nand by the browser.\n\nOne of the design goals of this library was to make isomorphic/universal javascript as easy as it\ncan be.\n\n{toc}\n\n### universal\n\nTo make a component 'isormorphic' or 'universal' the only thing you need to do is import it with\n`?universal` appended.\n\n```jsx\nimport App from '/App?univeral'\n\nexport default (\n  <html>\n    <head></head>\n    <body>\n      <App />\n    </body>\n  </html>\n)\n```\n\nIn this example `App` is universal and will be rendered both on the server and client.\n\nNote that switching from a non-universal component to a universal component changes the resulting\nhtml. When `?universal` is added, the result of `App` is rendered into an extra `<div />`. This is\nneeded to later 'hydrate' it again using `App` in the client.\n\nThis extra `<div />` can be given properties by giving the `<App />` a `universalContainerProps`\nprop:\n\n```jsx\n<App universalContainerProps={{ className: styles.appContainer }} />\n```\n\nBecause of the 'universal' nature of the component, any props passed to the component other than\n`universalContainerProps` will be serialized to make sure they are available on the client as well.\nAs a consequence, it's not possible to pass `children` and other data types that can not be\nserialized to JSON.\n\n\n### window\n\nWhen using this library you have to take into account that all of your components are rendered using\nnodejs. This means that the `window` scope is not available.\n\nIt's a good rule of thumb that 'life in the browser' only starts after `componentDidMount` has been\nexecuted. So make sure that anything involving the window scope or things like timers are only\nexecuted from the `componentDidMount` life-cycle hook.\n\nSome libraries are created for the browser. They might assume that the window scope is present on\nload. In those cases you can take advantage of runtime imports:\n\n```js\nasync componentDidMount() {\n  await import('windowDependentLibrary')\n  window.functionAddedByLibrary()\n}\n```\n\n### initial data (no children)\n\nPassing data to your universal component is easy, just pass in props:\n\n```jsx\n<App prop='value' />\n```\n\nOn the client (in the browser) the passed in props should be considered initial data. Please note\nthat these props are serialized to JSON. This means you can only pass in values that are part of\nthe JSON spec.\n\nPassing functions or children does not work. This means that the following will fail:\n\n```jsx\nimport App from '/App?univeral'\n\nexport default (\n  <html>\n    <head></head>\n    <body>\n      <App>\n        <h1>Title</h1>\n        <p>Content</p>\n      </App>\n    </body>\n  </html>\n)\n```\n\n### routing\n\nRouting in the browser works is different from routing on the server. In the browser you would need\nthe following ingredients to create client side routing:\n\n- `window.onpopstate` - Listen for `back` actions.\n- `window.history.pushState` - Change the url and add it to the history.\n- `window.history.applyState` - Change the url and replace the current history item.\n- `document.location` - Obtain the current location.\n\nEach link you have should call `pushState` and buttons (for example tabs) might call `replaceState`.\nAn simple example of a component that could help you with that looks like this:\n\n```jsx\nexport default function Link({ href, title, children }) {\n  return <a href={href} onClick={onClick}>{children}</a>\n\nfunction onClick(e) {\n    e.preventDefault()\n    window.history.pushState(null, title, href)\n  }\n}\n```\n\nIn your app you need to handle changes to the location:\n\n```jsx\nexport default class App extends Component {\n\n  state = {\n    location: null\n  }\n\n  render() {\n    return (location && location.pathname) || 'rendered on the server'\n  }\n\n  componentDidMount() {\n    const updateLocation = () => { this.setState({ location: document.location }) }\n\n    updateLocation()\n\n    window.onpopstate = updateLocation\n    patch('pushState')\n    patch('applyState')\n\n    function patch(method) {\n      const original = window.history[method]\n      window.history[method] = function patchedHistoryMethod(...args) {\n        original.apply(window.history, args)\n        updateLocation()\n      }\n    }\n  }\n}\n```\n\nAs you can see the `App` now handles any changes to the history. This version however is not yet\nuniversal. It will first display `rendered on the server` and then, once the client code has been\nloaded it will display the location.\n\nTo make it truly universal you would need to the following changes:\n\n```jsx\nimport App from '/App?univeral'\n\nexport default function index(location) {\n  return (\n    <html>\n      <head></head>\n      <body>\n        <App location={location} />\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx\nexport default class App extends Component {\n\n  state = {\n    location: this.props.location\n  }\n\n  ...\n}\n```\n\n### when to use\n\nIt doesn't always make sense to take the effort and make an application universal.\n\nIf an application is hiding behind a login screen, don't bother. You could just as well create a\nsingle page application.\n\nIf an application requires page transitions you do need it to be truly universal.\n\nIn most cases you would just make small parts universal. An example could be a form, a set of tabs\nor a carousel. And when using small universal parts you always need to think about the content you\nwant to have rendered by the server.\n\nFor a form you don't need any data. The location is not required to be passed in from the server and\nit most likely does not need data to be displayed.\n\nFor a set of tabs you would need to the location in order to display the correct active tab. You\ncould however choose to allways display the contents of the first tab on refresh.\n\nFor a carousel you could display the first image. This information might be fetched from the\ndatabase and would be passed in from the server. You could however choose to display a loader at\nfirst and only retrieve data once the client is loaded.\n\nConclusion: think about what you need and implement with the minimal amount of effort.\n\nps. Another good reason to use this feature is to learn `;-)`\n"},function(e,n){e.exports="## Wordpress\n\nThe world is full of Wordpress sites and sometimes you want to do more engaging things where a\nmodern front-end stack (and especially React) would help tremendously. This library can be used\nwith Wordpress and still provide most of the features offered by this library (most uniquely hot\nreloading).\n\nThis page is added to to the documentation to show how you could use this library with a non node.js\nframework. As a consequence there is no server side rendering using React. So this effectively means\nyou only use it to add single page applications or dynamic (javascript) components.\n\nThe code listings here are suggestions and meant to give you a concrete idea of the direction.\n\n{toc}\n\n### Step 1 - directories\n\nThe directory structure should look something like this:\n\n```js\n|_ config/\n|_ src/\n|_ target/\n|   |_ kaliberjs/\n|_ www/\n|   |_ kaliberjs/\n|_ package.json\n```\n\nAs you can see this is the default directory structure as defined by the conventions of this library\nwith one addition: the `www/` directory which is the root of your Wordpress site.\n\n`www/kaliberjs/` should be defined as a symlink to `../target/kaliberjs`\n\n### Step 2 - public path\n\nIn the previous step we have set up the directory structure in way that allows us to keep the source\nfiles out of the root and supply a route from the web root to the compiled files (`/kaliberjs/`).\nNow we need to make sure our compiled assets end up in the correct directory and function correctly\nin that sub directory.\n\nWe do this by adding a public path to the configuration:\n\n`config/default.js`\n```js\nmodule.exports = {\n  kaliber: {\n    publicPath: '/kaliberjs/'\n  }\n}\n```\n\n### Step 3 - rendering to php\n\nIn order to supply a nice and clear gateway to php we define a custom template renderer that handles\n`*.php.js` files. It would need to perform the following tasks:\n\n- Clone the given template to add `phpProps=\"%PHP_PROPS%\"` as a prop\n- Render the cloned template to a string\n- Generate PHP code that\n  - renders all required for the component\n  - replaces `%PHP_PROPS%` with a JSON encoded value from PHP\n  - outputs the result\n\nThis is a practical example:\n\n`src/php-renderer.js`\n```js\n/* global __webpack_chunkname__ */\nconst ReactDOMServer = require('react-dom/server')\nconst React = require('react')\n\nconst PHP_PROPS = '%PHP_PROPS%'\n\nmodule.exports = function phpReactRenderer(template) {\n  if (!template) return template\n\n  const templateWithPhpProps = React.cloneElement(template, { phpProps: PHP_PROPS })\n\n  return `\n  <?php\n    kaliber_renderEntry('${__webpack_chunkname__}');\n    // nowdoc syntax requires the closing 'tag' is at the very beginning of it's own line.\n    $template = <<<'KALIBERJS_REACT_TEMPLATE'\n      ${ReactDOMServer.renderToStaticMarkup(templateWithPhpProps)}\nKALIBERJS_REACT_TEMPLATE;\n    $props = htmlspecialchars(json_encode($this->args), ENT_QUOTES, 'UTF-8');\n    echo str_replace(\"&quot;${PHP_PROPS}&quot;\", $props, $template);\n  ?>\n  `\n}\n```\n\nWe also need to register the php template renderer:\n\n`config/default.js`\n```js\nmodule.exports = {\n  kaliber: {\n    templateRenderers: {\n      php: '/php-renderer'\n    }\n  }\n}\n```\n\n### Step 4 - styles and scripts\n\nIn order to be able to render all output of this library you need to create some php code. This php\ncode should supply you with a function that receives the name of an entry and renders all related\nscript and style tags.\n\nThis is done by making use of the 3 manifests this library spits out:\n\n- `target/chunk-manifest.json`\n- `target/css-manifest.json`\n- `target/entry-manifest.json`\n\nThis is what we use:\n\n```php\n<?php\nif (!isset($kaliber_renderedScripts)) $kaliber_renderedScripts = [];\nif (!isset($kaliber_renderedStyles)) $kaliber_renderedStyles = [];\nif (!function_exists('kaliber_renderScript')) {\n  function kaliber_renderScript ($scriptName) {\n    global $kaliber_renderedScripts;\n    if (!in_array($scriptName, $kaliber_renderedScripts)) {\n      array_push($kaliber_renderedScripts, $scriptName);\n      // https://www.w3.org/TR/html4/intro/sgmltut.html#h-3.2.2\n      echo \"<script defer src='/kaliberjs/{$scriptName}'><\/script>\";\n    }\n  }\n}\nif (!function_exists('kaliber_renderStyle')) {\n  function kaliber_renderStyle ($styleName) {\n    global $kaliber_renderedStyles;\n    if (!in_array($styleName, $kaliber_renderedStyles)) {\n      array_push($kaliber_renderedStyles, $styleName);\n      // https://www.w3.org/TR/html4/intro/sgmltut.html#h-3.2.2\n      echo \"<link rel='stylesheet' href='/kaliberjs/{$styleName}' type='text/css' media='all' />\";\n    }\n  }\n}\nif (!function_exists('kaliber_renderEntry')) {\n  function kaliber_renderEntry ($entryName) {\n    $dir_kaliberjs = $_SERVER['DOCUMENT_ROOT'] . '/kaliberjs';\n    $chunkManifest = json_decode(file_get_contents($dir_kaliberjs . '/chunk-manifest.json'), true);\n    $cssManifest = json_decode(file_get_contents($dir_kaliberjs . '/css-manifest.json'), true);\n    $entryManifest = json_decode(file_get_contents($dir_kaliberjs . '/entry-manifest.json'), true);\n    $entryChunks = array_key_exists($entryName, $entryManifest) ? $entryManifest[$entryName] : [$entryName];\n    foreach ($entryChunks as $x) {\n      if (array_key_exists($x, $chunkManifest)) {\n        $chunk = $chunkManifest[$x];\n        foreach ($chunk['group'] as $y) kaliber_renderScript($chunkManifest[$y]['filename']);\n        kaliber_renderScript($chunk['filename']);\n      }\n    }\n    $cssFiles = array_key_exists($entryName, $cssManifest) ? $cssManifest[$entryName] : [];\n    foreach ($cssFiles as $x) {\n      kaliber_renderStyle($x);\n    }\n  }\n}\n```\n\nFor our global CSS and global javascript we use the following code:\n\n```php\n<?php\n  kaliber_renderEntry('main.entry.js');\n  kaliber_renderEntry('main.entry.css');\n  wp_head();\n?>\n```\n\n### Step 5 - using the component\n\nFirst you need to create your php component:\n\n`src/app.php.js`\n```jsx\nimport config from '@kaliber/config'\nimport App from '/App?universal'\n\nexport default <App config={config.client} />\n```\n\nIn order to use it you need to include the generated php template, we use the following helper code:\n\n```php\nif ( ! class_exists('kaliber_Component') ) {\n  class kaliber_Component {\n    private $args;\n    private $file;\n    public function __construct($file, $args = array()) {\n      $this->file = $file;\n      $this->args = $args;\n    }\n    public function render() {\n      $file = $_SERVER['DOCUMENT_ROOT'] . $this->file;\n      if (file_exists($file)) {\n        include($file);\n      } else {\n        throw new Exception($this->file . ' not found');\n      }\n    }\n  }\n}\n\nif( !function_exists('kaliber_render_component') ) {\n  function kaliber_render_component($file, $args = array()) {\n    $fileWithExtension = preg_replace('/\\.php$/i', '', $file) . '.php';\n    $template = new kaliber_Component('/kaliberjs/' . $fileWithExtension, $args);\n    $template->render();\n  }\n}\n```\n\nAnd, finally, to use the component:\n\n```php\nkaliber_render_component('app', [ 'message' => 'from PHP' ])\n```\n\nThe `message` is accessible in the application at `this.props.phpProps.message`.\n"},function(e,n){e.exports="## Dynamic import\n\nIn some cases it makes sense to exclude certain parts from your main bundle. Webpack allows this\nby supporting the `import(...)` function.\n\nWith this library dynamic imports are only compiled for the web, so make sure they are in the 'web\npart' of your React components (`componentDidMount`). If you have a use case that requires dynamic\nimports to work on the server side as well, raise an issue with your use-case.\n\nA simple example:\n```jsx\nasync componentDidMount() {\n  const { default } = await import('./DymicallyImportedModule')\n  console.log('imported', default)\n}\n```\n\nMake sure to to read the Webpack documentation about [import()](https://webpack.js.org/api/module-methods/#import-)\n"},function(e,n){e.exports="## Loading entries\n\nIn some cases you need to add a piece of 'old-fashioned' javascript or CSS to a site.\n\nIn order for your classnames to be global you create a `{name}.entry.css` file.\n\nTo make sure you javascript is a separate entry that is compiled for the web you create a\n`{name}.entry.js` file.\n\nNow to automatically include them in your site you simply need to register the dependency by\nimporting them:\n\n```jsx\nimport '/main.entry.css'\nimport '/main.entry.js'\nimport stylesheet from '@kaliber/build/lib/stylesheet'\nimport javascript from '@kaliber/build/lib/javascript'\n\nexport default (\n  <html>\n    <head>\n      {stylesheet}\n      {javscript}\n    </head>\n    <body />\n  </html>\n)\n```\n"},function(e,n){e.exports="## Polyfills\n\nWe're using [polyfill.io](https://polyfill.io) ([Financial-Times/polyfill-service](https://polyfill.io/)) for polyfills:\n\n> Polyfill.io is a service which makes web development less frustrating by selectively polyfilling just what the browser needs. Polyfill.io reads the User-Agent header of each request and returns polyfills that are suitable for the requesting browser.\n\nFor now we're using the hosted version by Polyfill.io. In the future we might implement a local version of polyfill, but first this library needs to cleanup their dependencies. ([#153 comment](https://github.com/kaliberjs/build/pull/153#issuecomment-433186784)).\n\n### features and aliases\nOur `polyfill()` method (see example below) expects an array of features and aliases. See https://polyfill.io/v2/docs/ for more info about features and aliases.\n\n\n### Examples\n\n```jsx\n// import the polyfill\nimport polyfill from '@kaliber/build/lib/polyfill'\n\nexport default (\n  <html>\n    <head>\n      {/* call the polyfill with the required aliases and features */}\n      {polyfill(['default', 'es2015', 'es2016', 'es2017', 'fetch'])}\n      {/*\n        this will output: \n        <script defer src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=default,es2015,es2016,es2017,fetch\" crossorigin=\"anonymous\" />\n      */}\n    </head>\n    <body />\n  </html>\n)\n```\n"},function(e,n){e.exports="## Rollbar error reporting\n\nOur error reporting service of choice is Rollbar. To make life easier there's a convenient helper to render the rollbar-config and -snippet inside your head component.\n\n## Usage\n\nImport `@kaliber/build/lib/rollbar` and execute it with an options object. It will return a script tag with the Rollbar-config and -snippet.\n\n## Options\n\nSee https://docs.rollbar.com/docs/rollbarjs-configuration-reference for all available options.\n\n### Default options\n\n```js\nconst defaultOptions = {\n  captureUncaught: true,\n  captureUnhandledRejections: true,\n  scrubTelemetryInputs: true,\n  captureIp: false,\n  payload: { environment: process.env.CONFIG_ENV },\n  autoInstrument: { log: process.env.NODE_ENV === 'production' },\n}\n```\n\n### Example\n\n```jsx\nimport rollbar from '@kaliber/build/lib/rollbar'\n\nexport default (\n  <html>\n    <head>\n      {/* include rollbar before any other javascript */}\n      {rollbar({ accessToken, ...  })}\n\n      {polyfill(['default', 'es2015', 'es2016', 'es2017', 'fetch'])}\n      {javascripts}\n    </head>\n    <body />\n  </html>\n)\n```\n"},,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";(function(e,o){t.d(n,"a",(function(){return V}));var a=t(53),r=t.n(a),i=t(54),s=t.n(i),l=t(55),c=t.n(l),d=t(56),h=t.n(d),u=t(57),p=t.n(u),m=t(58),f=t.n(m),y=t(59),g=t.n(y),b=t(60),w=t.n(b),v=t(61),j=t.n(v),k=t(1),x=t(62),S=t(63),T=t(13),_=t(7),I=t.n(_);function A(e){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function P(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function R(e,n){return!n||"object"!==A(n)&&"function"!=typeof n?E(e):n}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function N(e,n){return(N=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function M(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function $(e){return function(e){if(Array.isArray(e))return L(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||D(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var t=[],o=!0,a=!1,r=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){a=!0,r=e}finally{try{o||null==s.return||s.return()}finally{if(a)throw r}}return t}(e,n)||D(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function D(e,n){if(e){if("string"==typeof e)return L(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(t):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?L(e,n):void 0}}function L(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}var F=[["","Introduction",r.a],["getting-started","Getting started",c.a],["configuration","Configuration",h.a],["conventions","Conventions",p.a],["how-to","How to",[["static-site","Static site",k.l],["server-side-rendering","Server side rendering",k.j],["single-page-application","Single page application",k.k],["page-in-sub-directory","Page in a sub-directory",k.f],["isomorphic-javascript","Isomorphic (Universal) javascript",k.c],["basic-auth","Basic authentication",k.a],["mail-templates","Mail templates",k.e],["redirects","Redirects",k.h],["wordpress","Integrate with WordPress",k.m],["dynamic-import","Dynamic import",k.b],["loading-entries","Loading entries",k.d],["polyfills","Polyfills",k.g],["rollbar-error-reporting","Rollbar error reporting",k.i]]],["template-renderers","Template renderers",g.a],["server","Server",j.a],["choices","Choices",s.a],["important-changes","Important changes",w.a],["advanced","Advanced topics",f.a]],H=F.reduce((function(e,n){var t=q(n,3),o=t[0],a=t[1],r=t[2];return[].concat($(e),$(Array.isArray(r)?r.map((function(e){var n=q(e,3),t=n[0],a=n[1],r=n[2];return[o+"/"+t,a,r]})):[[o,a,r]]))}),[]),V=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&N(e,n)}(s,e);var n,t,a,r,i=(n=s,function(){var e,t=W(n);if(O()){var o=W(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return R(this,e)});function s(){var e;C(this,s);for(var n=arguments.length,t=new Array(n),o=0;o<n;o++)t[o]=arguments[o];return M(E(e=i.call.apply(i,[this].concat(t))),"state",{pageInfo:[]}),e}return t=s,(a=[{key:"render",value:function(){var e=this.props.publicPath,n=this.state.pageInfo,t=q(n=void 0===n?[]:n,3),a=t[0],r=void 0===a?"not-found":a,i=(t[1],t[2]),s=void 0===i?"Sorry":i;return o.createElement(T.a.Provider,{value:e},o.createElement("div",{className:I.a.container},o.createElement("div",{className:I.a.sidebar},o.createElement(x.a,{pages:F,page:r})),o.createElement("div",{className:I.a.content},o.createElement(S.a,null,s))))}},{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.props.publicPath,n=this;o(),window.onpopstate=o;var t=window.history.pushState;function o(){if(n.mounted){var t,o,r,i=(t=q(document.location.hash.slice(1).split("#"),2),o=t[0],r=t[1],o&&a(o,r?"#"+r:"")||a(document.location.pathname.replace(e,""),document.location.hash));if(i){var s=i.location,l=i.pageInfo;n.setState({pageInfo:l},(function(e){var n=window.location.hash;if(n){var t=document.getElementById(n.slice(1));t&&t.scrollIntoView()}}));var c=q(l||[],2),d=(c[0],c[1]),h=void 0===d?null:d;window.history.replaceState(null,h,e+s)}}}function a(e,n){var t=e.endsWith("/")?e:e+"/",o=H.find((function(e){return q(e,1)[0]+"/"===t}));return o&&{location:(t.startsWith("/")?t.slice(1):t)+n,pageInfo:o}}window.history.pushState=function(e,n,a){window.scrollTo(0,0),t.call(window.history,e,n,a),o()}}},{key:"componentWillUnmount",value:function(){this.mounted=!1}}])&&P(t.prototype,a),r&&P(t,r),s}(e)}).call(this,t(0).Component,t(0))},function(e,n){e.exports="\n## Introduction\n\nThe `@kaliber/build` library is the single dependency you need to create a website. It contains a\nmodern build stack and a small server. It's designed to function without any configuration.\n\nThe consequence of this design decision is that this library is very opinionated and leans very\nheavily on conventions. However, we embrace conversation, so if you think we need to change something\nplease open an issue.\n\n{toc}\n\n### Use cases\n\nThere are quite a lot of ways you can use this library. A handful of use cases:\n\n#### A simple static site\n\nYou write your html with help of React using all conveniences of modern javascript syntax. The css\nis written in using modern css.\n\n```jsx\nimport stylesheet from '@kaliber/build/stylesheet'\nimport styles from '/main.css'\n\nexport default (\n  <html>\n    <head>\n      {stylesheet}\n    </head>\n    <body>\n      <h1>Hello world!</h1>\n      <div className={styles.body}>How are you doing?</div>\n    </body>\n  </html>\n)\n```\n\nRead more at [how-to: static site](/how-to/static-site)\n\n#### A static site with javascript in the browser\n\nServer side rendering is the default, but switching to a universal/isomorphic component is very\neasy: simply add `?universal` to your import.\n\n```jsx\nimport MyComponent from '/MyComponent?universal'\nimport Page from '/Page'\n\nexport default (\n  <Page>\n    <MyComponent title='Hello world!' flashInterval={1000} />\n  </Page>\n)\n```\n\nRead more at [how-to: isomorphic javascript](/how-to/isomorphic-javascript)\n\n#### A dynamic site with content based on the location\n\nSometimes you want to show different content based on the given location, but you don't want to\ncreate separate html pages for each location.\n\n```jsx\nimport Page from '/Page'\n\nexport default ({ location }) => (\n  <Page>\n    location.pathname === '/part1'\n      ? <Part1 />\n      : <Part2 />\n  </Page>\n)\n```\n\nRead more at [how-to: server side rendering](/how-to/server-side-rendering)\n\n#### A dynamic site with dynamic data\n\nA lot of sites require content to be fetched from some sort of CMS. In most cases some form of\nidentifier is available in the url. On top of that, things change, so you might need to redirect.\n\n```jsx\nindex.routes = {\n  match: async location => {\n    const { pathname } = location\n\n    if (pathname.startsWith('/article/')) {\n      const [id] = pathname.split('/').slice(2)\n      const data = await fetchArticle(id)\n\n      if (data) return { status: 200, data }\n      else return { status: 404 }\n    }\n\n    const oldArticles = '/articles'\n    if (pathname.startsWith(oldArticles)) {\n      return { status: 301, headers: { Location: '/article' + pathname.replace(oldArticles) }}\n    }\n\n    return { status: 404 }\n  }\n}\n\nexport default function index(({ location, data })) {\n  return ...\n}\n```\n\nRead more at [how-to: server side rendering](/how-to/server-side-rendering)\n\n#### Just modern css and javascript\n\nIn some cases you already have a framework in place to handle the rendering of your html. This\nlibrary can also be used to simply enable you to write modern javascript and css. Simply create a\n`name.entry.js` or `name.entry.css` file and they will be picked up and transpiled along with\nall of their dependencies.\n\nLearn more at [conventions: entries](/conventions#entries)\n\n#### Templating\n\nJavascript can be a great template language for any output format. This library provides a way to\nhave javascript files turned into arbitrary other formats.\n\nIt consists of two parts:\n1. The template renderer\n2. The template\n\nFirst step is to create a renderer (`/myRenderer.js`).\n\n```js\nexport default function myRenderer(template) {\n  // in real life, use a csv library\n  return template.map(x => x.join(',')).join('\\n') + '\\n'\n}\n```\n\nRegister the renderer in the configuration.\n\n```js\n{\n  kaliber: {\n    templateRenderers: { csv: '/myRenderer' }\n  }\n}\n```\n\nCreate a template (`/my.csv.js`).\n\n```js\nexport default [\n  ['a', 'b', 'c'],\n  ['d', 'e', 'f'],\n]\n```\n\nThe result is a `my.csv` file:\n\n```\na,b,c\nd,e,f\n\n```\n\nRead more at [template renderers](/template-renderers)\n\n#### More\n\nThis is the introduction page to give you a quick overview. There are quite a few use cases where\nthis library can help you. Explore the docs to see if your use case is supported. If it's not\nplease check the issues if it is not supported on purpose. No related issue? File one, we would love\nto hear about your use case!\n\n\n### Features\n\nSome notable features:\n\n#### Watch, build, serve\n\nWe provide 3 npm binaries that can be used in the `scripts` of your `package.json`:\n\n- `kaliber-watch` - Starts the build process that will recompile when a file changes.\n- `kaliber-build` - Creates a build (including minification)\n- `kaliber-serve` - Starts a simple express server, usable for both developement and production\n\n#### Easy universal rendering\n\nWhat if I told you that making a component universal was as easy as adding `?universal` to it's\nimport statement?\n\nLet's say you have the following static site:\n\n```jsx\nimport MyComponent from '/MyComponent'\n\nexport default (\n  <html>\n    <head>...</head>\n    <body>\n      <MyComponent someProp='value' />\n    </body>\n  </html>\n)\n```\n\nThe contents of `MyComponent` are only rendered on the server and many of lifecycle methods that\nare triggered in the client never happen (most notably `componentDidMount`). The only change I need\nto make to be able to add dynamic stuff and start using `state` in my component is the following:\n\n```jsx\nimport MyComponent from '/MyComponent?universal' // <--\n\nexport default (\n  <html>\n    <head>...</head>\n    <body>\n      <MyComponent someProp='value' />\n    </body>\n  </html>\n)\n```\n\nRead more at [how-to: isomorphic javascript](/how-to/isomorphic-javascript)\n\n#### Hot reloading without a dev server\n\nThe `kaliber-watch` process communicates directly with your browser. This means you can use hot\nreloading in the javascript that is hosted in another framework.\n\nAs a side note, your CSS is also hot reloaded.\n\n#### Asset fingerprinting\n\nCaching is important and by far the best way to make sure the correct things are cached is by\nfingerprinting the assets with a content based hash as a name. We fingerprint all assets that move\nthrough the build tool. Don't worry, we also generate manifest files that allow you to obtain the\nfile names based on the original file name.\n\n#### Server\n\nThe library comes with a small node.js server. This server can be used both in development as in\nproduction.\n\nLearn more at [server](/server)\n\n#### Copying of unused files\n\nThe build tool copies all unused files in the source directory to the target directory. This allows\nyou to keep all files together.\n\n#### Environment dependent configuration\n\nBy setting the `CONFIG_ENV` environment variable you determine what configuration to load. We also\nsupport `default.js` and `local.js`.\n\nRead more at [configuration](/configuration)\n\n### Technology\n\nJust a list.\n\n- React\n- Webpack\n- Node.js\n- Babel\n- Eslint\n- Postcss\n- CssNext\n- Express\n- @kaliber/config\n\nIf you want to know why we picked these, read the section on [choices](/choices)\n"},function(e,n){e.exports="## Choices\n\nCreating a library like this means making choices. We made quite a few choices and while some are\narbitrary or accidental, some of them are very conscious.\n\nIf you don't agree with one of the choices we made please, check here or in the issues if it's a\nconscious choice. And after you understand our position and still disagree, please op an issue. We\nlove to have these discussions as they will lead to one of two things:\n\n- We will get a better understanding of the choice we made and should be able to explain it better.\n- We will be convinced your opinion is better, change our opinion and learn something new.\n\nAnother thing to note is that some choices come down to taste. The eslint settings we have addopted\nare a good example for this. With eslint we tried to only enable the settings that would prevent\nerrors. As soon as we encounter a setting that is not worth more time to discuss, and there were no\nconvincing arguments to one style or the other we allow both styles.\n\n{toc}\n\n### Open source\n\nWe think this will be a hard one for you to argue with. If this wasn't open source we would not have\nthis conversation.\n\n### React\n\nWe like the React way of thinking and have seen it's effect on our productivity, consistency and\nquality. We are quite pleased with the team behind it, the documentation and it's release and\nmigration management.\n\nReact sparked a few similar alternatives, we however stick with the big one.\n\nAnother reason is that React does not have a lot of magic. It does not have framework specific\nconstructs to perform loops or display content. This does not mean the code is easily portable to\nanother framework, but it does mean that developers can understand it fairly easy with javascript.\n\nAnd because it's \"just javascript\" we can use functions and imports to reuse our html code.\n\nIn order to make working with `React` even more pleasant we make sure that `React` and\n`React.Component` are available; you do not need to import them.\n\n### Modern javascript\n\nWe try to keep up with the standard and are generally reluctant to add proposed experimental\nfeatures. We do however have added some non-standard features that we feel make our lives better:\n\n- Dynamic import syntax\n- Decorators\n- Class properties\n- Object rest spread\n\n### Webpack\n\nWe have extensively looked at the alternatives and even started building our own build tool. This\nhowever has convinced us that, even with it's flaws, Webpack is the right tool to use here.\n\nThis choice was reaffirmed by the last few releases where two important things happened:\n\n1. The internals were improved massively with a new mechanism for hooks and some long overdue\n   cleanup of code.\n2. The defaults improved. It can now be used with a lot less configuration. On top of that we were\n   able to remove a custom plugin because Webpack came with a plugin that did the same thing.\n\nStill, some of the Webpack ecosystem is more complex than needed. This is why we have our own custom\nplugins and loaders other than the common choices or defaults:\n\n- Loading CSS\n- Merging CSS\n- Source maps\n\nWe are not afraid to bend Webpack to our needs, Webpack is very flexible and once you get to know\nthe source code of the beast this is quite doable.\n\n### Express\n\nThere are alternatives for Express. But it is one of the libraries that is well known and most used.\nOn top of that, we do not have a lot of Node.js server code, so the attractive features of other\nalternative frameworks have less weight.\n\nWe made the server that came with this library small and restrictive because we believe backend\nprocessing should be done differently. The server is a component that you don't have to use,\neverything (including hot reloading) can be used when you use the library with another server. We\ndid however provided you with an escape hatch that allows you to manipulate express using the\nconfiguration.\n\n### Convention over configuration\n\nRuby popularized this idea and it greatly helped us to reduce the amount of configuration needed to\ncreate an application with only a bare minimum of configuration.\n\nWe try to be zero-configuration and you will find we are very reluctant to make something\nconfigurable. In many cases we adopt a new convention rather than make something configurable.\n\nWe believe that this attitude helps us making better decisions and provide more consistency. One\nexample is a good illustration.\n\n> We had a project where were asked to supply some html and css that another company would copy and\n> paste into their server side code. This required us to abandon CSS module syntax with it's\n> generated class names. Since this was the first use case and we didn't expect it to be a common\n> occurence we just added `global(...)` to all of our class selectors.\n>\n> Some time later we encountered a similar situation and one of us asked if we could make it\n> configurable. The result of this was that we came to the conclusion that only certain types of css\n> files were most likely be used in this situation. And it was then that we decided that all\n> `*.entry.css` files should not use css modules at all. This new convention fits the use cases\n> perfectly.\n\n### Postcss and cssnext\n\nWhen we chose this we had enough experience with Sass and Less. While both alternatives had more\nfeatures we felt that postcss in combination with cssnext was enough for us. On top of that, it\nfit very well with our vision for javascript: write in the code that will eventually become adopted.\n\nAt time of writing there is a new candidate on the horizon: CSS in javascript. We are still not sure\nif we want to adopt this and to what degree. A few pro's and cons:\n\n- It is moving css in the opposite direction of javascript. Javascript is moving to a more static\n  and analyzable structure with it's import statements. CSS in js is moving towards a more dynamic\n  approach.\n- It makes communication between javascript and CSS significantly easier.\n- It allows you to render only the essential CSS on your server.\n- It moves the complications of supporting modern features from compile time to run time with impact\n  on performance and complexity.\n- It's quite young.\n- It's popular.\n\nIf you think you can add to the discussion, feel free to help us gain more insight. Extensive\nexperience with it would be awesome as you could help us figure out the practical trade-offs.\n\n### Root import using /\n\nIn node.js you will find yourself using `../` if you want to import something from another sibling\ndirectory. This is fragile when moving around code. In the Webpack community it is common to add\nthe `src` directory as a module directory. This however poses a potential problem when a node\nmodule shows up having the same name as one of the files or directories in your `src` directory.\n\nThere would for example be no distinction between the `src/config.js` file and `node_modules/config`\nmodule. It solely depends on the resolution order what the result of `import 'config'` would be.\n\nWe chose to adopt using `/config` to select a file from the `src` directory. This corresponds with\nthe semantics of the browser where `/` also means the root of the website. This has the added\nadvantage that it prevents importing from the root of the file system.\n\n### No configuration in client side javascript\n\nWe prevent imports of `@kaliber/config`, we do this to make sure no sensitive information ends up in\nthe javascript bundle. In order to pass configuration to the client side javascript you need to pass\nit to the universal component as a prop.\n\nIf you need configuration in an `{name}.entry.js` file, you can use the same mechanism employed by\nthe universal system: put json in a data attribute and fetch it with javascript.\n\n### Fingerprint all assets\n\nCaching of browsers is great. And the best cache is one that never expires. In order to leverage\nthis all assets that a processed by our library are stored as files that have a hash as name. This\nhash is a hash of the content and thus only changes when the content is different. This allows us to\ndo long term caching.\n\nThe downside is that you don't know how you need to load these files. We provide a few mechanisms\nthat create the script and style tags required for the current module. These mechanisms are however\nonly available when using this library to create the final html page.\n\nIn case you need to use a different framework you can rely on the generated JSON manifest files:\n\n- `target/chunk-manifest.json`\n- `target/css-manifest.json`\n- `target/entry-manifest.json`\n\n### Ask us\n\nIf you want to hear why we have made a certain choice, please create an issue."},function(e,n){e.exports='## Getting started\n\nThe hard part is not getting started, it\'s choosing the right type of application.\n\n{toc}\n\n### Installation and setup\n\n#### Scaffold\n\nThe scaffold-command will copy a template to an empty project-directory. It will not overwrite\nexisting files.\n\nOneliner, inside your (empty) project folder:\n\n```\nyarn add @kaliber/build && ./node_modules/.bin/kaliber-scaffold && yarn start\n```\n\nStep by step, inside your (empty) project folder:\n```\nyarn add @kaliber/build\n\n./node_modules/.bin/kaliber-scaffold\n\nyarn start\n```\n\nNote that this is a template for a static site.\n\n#### Manual\n\n```js\nyarn add @kaliber/build\nyarn add npm-run-all // (optional) only used for the start script\n```\n\nAdd scripts to `package.json`\n```json\n{\n  "scripts": {\n    "start": "run-p watch serve.dev",\n    "watch": "CONFIG_ENV=dev kaliber-watch",\n    "build": "NODE_ENV=production kaliber-build",\n    "serve": "NODE_ENV=production kaliber-serve",\n    "serve.dev": "PORT=8000 CONFIG_ENV=dev kaliber-serve"\n  }\n}\n```\n\nCreate a `config/` directory with a `dev.js` file:\n\n```js\nmodule.exports = {}\n```\n\nCreate a `src/` directory with an `index.html.js` file:\n\n```jsx\nexport default (\n  <html>\n    <head />\n    <body>Hello world!</body>\n  </html>\n)\n```\n\n| Description                                                   | Command                                   |\n| :------------------------------------------------------------ | :---------------------------------------- |\n| Development                                                   | `yarn start`                              |\n| build production package with `dev` configuration             | `CONFIG_ENV=dev yarn run build`           |\n| serve production mode with `dev` configuration at port `8000` | `CONFIG_ENV=dev PORT=8000 yarn run serve` |\n\n### Choosing the project type\n\nThis library supports different types of projects.\n\n- [Static sites](/how-to/static-site) vs [Server side rendering](/how-to/server-side-rendering)\n- [Single page application](/how-to/single-page-application) vs [Isomorphic (Universal) javascript](/how-to/ismorphic-javascript)\n- [Built in server](/server) vs Other server (for example [PHP with Wordpress](/how-to/wordpress))\n'},function(e,n){e.exports="## Configuration\n\nWe tend to lean towards zero configuration. There are however a few essentials that do require\nconfiguration.\n\nThis library does provide a way to have environment specific configuration in your project.\n\n{toc}\n\n### Environment variables\n\nThere are things that depend on the environment and that change between almost all deployments. For\nthese cases we use environment variables.\n\n#### NODE_ENV\n\nWe only use the `NODE_ENV` variable to determine if this is a `production` build. Libraries tend to\ncheck if it's value is `production` and produce a more performant version.\n\nWe only take a value of `production` to mean 'production build'.\n\nPlease be aware that `yarn install` uses the `NODE_ENV` variable to only include the `dependencies`\npart of your `package.json`, it ignores `devDependencies`. So on your build server use\n`yarn install --production=false`.\n\n#### CONFIG_ENV\n\nThis is used to determine which configuration file to use. We use the following convention:\n\n| Config  | Name        | Description                                                       |\n| ------- |------------ | ----------------------------------------------------------------- |\n| *`dev`* | development | Our local computers.                                              |\n| *`tst`* | test        | A server for us to test in a similar environment as production.   |\n| *`acc`* | acceptance  | A server for the customer to preview and accept upcoming changes. |\n| *`prd`* | production  | The production server.                                            |\n\nWe use [`@kaliber/config`](https://github.com/kaliberjs/config) to load the configuration. Note that\nthe an import of `@kaliber/config` is forbidden in the client side javascript files.\n\n#### PORT\n\nThe `PORT` is only used by the server to determine on what port to accept http requests.\n\n### Configuration settings\n\nWe use [`@kaliber/config`](https://github.com/kaliberjs/config) to load the configuration. The\n`config/` directory holds the configuration files. If you supply `CONFIG_ENV=dev` it will look for\na `config/dev.js` file.\n\nIf you have a settings that is the same in all configuration environment you can place it in the\n`config/default.js` file. If you want to test something you can use `config/local.js` to override\na setting. It's recommended to add `config/local.js` to your `.gitignore` file.\n\nThese different files are merged in the following order:\n1. `default.js`\n2. `${CONFIG_ENV}.js`\n3. `local.js`\n\nAll configuration that is specific for this library lives in the `kaliber` key.\n\n```js\nmodule.exports = {\n  kaliber: {\n    ...\n  }\n}\n```\n\n#### publicPath\n\nThe `publicPath` setting determines the sub-directory your application will live in once deployed.\nThis setting should most likely be placed in the `config/default.js` file.\n\n```js\nmodule.exports = {\n  kaliber: {\n    publicPath: '/build/'\n  }\n}\n```\n\n#### node externals\n\nIn the case that you want to force a node_module to be parsed with Babel you can add them to\n`compileWithBabel`, The config works the same as the [`webpack configuration`](https://webpack.js.org/configuration/module/#condition)\nand whitelists node_modules using [`webpack-node-externals`](https://github.com/liady/webpack-node-externals#optionswhitelist-).\n\n```js\nmodule.exports = {\n  kaliber: {\n    compileWithBabel: [/node_modules\\/subscribe-ui-event/]\n  }\n}\n```\n\n#### templateRenderers\n\nTemplate renderes react to the `*.xyz.js` pattern. The `xyz` part refers to the renderer.\n\nAn example of specifying an `mjml` renderer which handles `*.mjml.js` files:\n```js\nmodule.exports = {\n  kaliber: {\n    templateRenderers: {\n      mjml: '/mjml-renderer'\n    }\n  }\n}\n```\n\nNote that template if a template file exports a function it will retain the same name. If it exports\na non function, the result of the renderer will be placed in a file without the `.js` part.\n\n- `index.html.js` with function exported results in `index.html.js`\n- `index.html` with a non function exported results in `index.html`\n\nSee [template-renderers](/template-renderers) for more details.\n\n#### serveMiddleware\n\nWe try to keep our node server as simple as possible. Sometimes however we need to add something to\nthe express server. In some prototypes we want to experiment with a technology and on most test and\nacceptance servers we want to enable basic authentication.\n\n```js\nmodule.exports = {\n  kaliber: {\n    serveMiddleware: xxx\n  }\n}\n```\n\nThe value that is placed on the `xxx` will be injected into the following code:\n\n```js\napp.use(...[].concat(serveMiddleware))\n```\n\nThis allows you to call the `use` function in any way you like. If you only need to supply a single\nargument you set the value of that argument to `serveMiddleware`. If you need multiple arguments you\ndefine `serveMiddleware` as an array corresponding to those arguments.\n"},function(e,n){e.exports="## Conventions\n\nWe strongly believe that conventions help us to be more productive. Conventions tend to get stuck in\nyour system and our brain seems to be really good at remembering them. Contrast this with\nconfiguration for which we seem to have the convention: \"don't remember, you can always look it up\".\n\nThis library has quite a few conventions and a lot of them are enforced. It's quite possible that\nyou don't agree with some of these conventions. In some cases this is just a matter of taste, in\nother cases there is reasoning. We love to hear your ideas about specific conventions. Even if\nwe do not agree on something, we will all walk away with a better understanding of the choices we\nmade.\n\nSo if you can not find a reason for a choice we made, please ask us. It might have been an\naccidental choice and we do love to turn those choices into concious ones.\n\n{toc}\n\n### Directories\n\nWe assume the following project structure:\n\n```\n|_ package.json\n|_ config/\n|_ src/\n|_ target/\n```\n\n#### config\n\nThe `config/` directory contains the configuration files loaded using `@kaliber/config`. An example\nof it's typical contents:\n\n```\n|_ default.js\n|_ dev.js\n|_ tst.js\n|_ acc.js\n|_ prd.js\n|_ local.js\n```\n\n`default.js` should only contain configuration that is the same in all configuration environments.\n\n`dev`, `tst`, `acc` and `prd` are the conventions we use (DTAP). You are free to pick any other\nconvention, nothing in the library depends on this.\n\n`local.js` is only used for testing to temporary override a configuration value and should be\nincluded in your `.gitignore` file.\n\n#### src\n\nThe `src/` directory holds the source files. Any source files that are not 'in use' are copied to\nthe `target/` directory. With 'in use' we mean somehow touched by Webpack by being referenced\nthrough one of the [entries](#entries).\n\n#### target\n\nThe `target/` directory is where the compilation writes it's result to. It is recommended you add\nthis directory to your `.gitignore` file.\n\n### Execution\n\nWe assume the provided methods (`kaliber-watch`, `kaliber-build` and `kaliber-serve`) are being\nexecuted from the directory that contains the `src/` and `targe/` directory.\n\n### Entries\n\nWebpack needs entries (or entry points) to function. These are the file patterns we use to gather\nentries:\n\n```js\n[\n  `**/*.@(${recognizedTemplateTypes.join('|')}).js`,\n  '**/*.entry.js',\n  '**/*.entry.css'\n]\n```\n\nBy default `html`, `json` and `txt` are registered as template types.\n\n#### `*.entry.js`\n\nThis is used for plain-old javascript files. You would create this if your end-product is a\njavascript file that would be loaded by some web framework.\n\nIn order to find out the compiled (fingerprinted) filename you need the contents of\n`target/chunk-manifest.json`.\n\n#### `*.entry.css`\n\nThis is used for plain-old CSS files. The difference with other CSS files (that are typically\nimported from a javascript file) is that CSS modules are disabled. You would create this if the CSS\nshould apply to html created using another library or framework.\n\nIn order to find out the compiled (fingerprinted) filename you need the contents of\n`target/css-manifest.json`.\n\n#### `*.{type}.js`\n\nThese are templates and will be picked up if `{type}` is registered (or configured) as a template\nrenderer.\n\nNote that the following types are reserved:\n- `raw` - This is used as an indicator for Webpack to load the file using the `raw-loader`\n- `entry` - This is used for the javascript entries\n\nThe following build-in types are registered:\n- `html` - Expects a React element that is rendered to a string prepended with `<!DOCTYPE html>\\n`\n- `json` - Renders the resulting javascript value as JSON\n- `txt`  - Expects string and returns it\n\nYou can override these defaults with your own implementation.\n\n### Templates\n\nA template is recognised by the `{name}.{type}.js` filename where `type` should be a registered\ntemplate renderer.\n\nThe default export value determines how the template is rendered.\n\n#### Static templates\n\nA static template is created by returning a non-function value. As a consequence this template is\nexecuted as part of the build and `src/{name}.{type}.js` will rendered to `target/{name}.{type}`.\n\n#### Dynamic templates\n\nA dynamic template is created by returning a function value. As a consequence this template will be\npackaged together with its renderer and `src/{name}.{type}.js` will be compiled to\n`target/{name}.{type}.js`.\n\nSo the template (`props => type`) will be converted to `props => renderer(template(props))`.\n\n### Loaders\n\nWe have configured a set of loaders for Webpack. These are triggered for import statements and file\nreferences in CSS and javascript.\n\n#### `*.raw.*`\n\nThese files are loaded using the [`raw-loader`](https://github.com/webpack-contrib/raw-loader). This\nloader exports the file as a string. This is ideal for loading code snippets, markdown files and\nother files that you need in raw string format.\n\n#### `*.json`\n\nJSON files are handled directly by Webpack, we do not use a special loader.\n\n#### `*.entry.css`\n\nThese files are loaded using our own CSS loader. The difference with `*.css` files is that the CSS\nmodules plugin is configured with `global` as it's scope behavior.\n\n#### `*.css (excluding node_modules)`\n\nThe css files from your project are loaded using our own CSS loader. This loader uses postcss which\nis configured to use the following plugins:\n\n- `postcss-import`                    - Allows for `@import` statements in CSS.\n- `postcss-apply`                     - Allows for `@apply` statements in CSS.\n- `postcss-preset-env`                - Use tomorrow’s CSS today.\n- `postcss-modules-values`            - Pass arbitrary values between your module files.\n- `postcss-modules-local-by-default`  - Make :local scope the default.\n- `postcss-modules-scope`             - A CSS Modules transform to extract export statements from local-scope \n                                        classes. Importing a CSS file into javascript provides an object that \n                                        contains the original class names as key and locally scoped class names\n                                        as value.\n- `postcss-calc`                      - Reduce calc() references whenever it's possible.\n- `postcss-url-replace`               - Our own plugin that makes sure all `url` references are loaded using the\n                                        defined Webpack loaders.\n- `postcss-import-export-parser`      - CSS imports and exports parser.\n- `cssnano`                           - Is only used when `NODE_ENV=production` and minifies the javascript.\n\n#### `*.css (if not matched by another pattern)`\n\nIn practice this is CSS from `node_modules`. Loaded using our CSS loader, all but the `cssnano`\nplugins are disabled.\n\n#### `*.js?transpiled-javascript-string`\n\nIn rare cases you need to add javascript in the body of a script tag. This can be used for that\nscenario. Please note that this should be considered an undocumented feature, there are very few use\ncases where you would need it.\n\n#### `*.html.js and *.js (excluding node_modules)`\n\nThe files are processed using the babel loader. This loader is configured with the following\npresets:\n\n- `env`   - Adds all plugins that are considered `latest`.\n- `react` - Adds all plugins required to support React.\n\nWe have also added the following plugins:\n\n- `syntax-dynamic-import`        - Allows us to take advantage of Webpacks support for dynamic\n                                   imports.\n- `transform-decorators-legacy`  - With complex React applications decoraters help to reduce\n                                   boilerplate.\n- `transform-class-properties`   - Makes defining the initial state easy.\n- `transform-object-rest-spread` - We have it for arrays, we like it with objects as well.\n- `transform-async-to-generator` - Async await can help make code more readable.\n- `transform-runtime`            - This is only used for generator functions. Note that we only\n                                   added this to support async/await.\n\n#### `*.js (if not matched by another pattern)`\n\nIn practice this is javascript from `node_modules`. This is not processed by a loader and handled\ndirectly by Webpack.\n\n#### `*.svg#fragment`\n\nThis is handled by our own fragment loader. No optimization is performed on the svg.\n\n#### `*.svg`\n\nOptimized using the `image-webpack-loader` and inlined if the size is less than 5000 bytes.\n\n#### `*.jpg, *.jpeg, *.png and *.gif`\n\nThese files are first processed by the `image-maxsize-webpack-loader` which allows for resizing at\nload time. It is then optimized using the `image-webpack-loader` (only if `NODE_ENV=production`) and\ninlined if the size is less than 5000 bytes.\n\n#### The rest\n\nAll other files are loaded using the `file-loader`.\n\n### Plugins\n\nWebpack allows plugins to change its default behavior and add additional features.\nWe use quite a range of plugins and depending on the Webpack `target` (`node` or `web`) a plugin is\nenabled.\n\n#### ProgressBarPlugin\n\n`node` and `web` - It show's the progress of the current build.\n\n#### websocketCommunicationPlugin\n\n`node` and `web` - A custom plugin that is only used for the `kaliber-watch` command. Is used to\nprovide other plugins with a websocket to communicate with the client.\n\n#### makeAdditionalEntriesPlugin\n\n`node` and `web` - A custom plugin that allows other modules to add new entries at the correct stage\nof the build. It also allows plugins to 'claim' entries in order for them not to be processed by\nthe default process.\n\n#### CaseSensitivePathsPlugin\n\n`node` and `web` - Enforces case sensitive paths in Webpack requires to help the Mac users that are\ntoo lazy to store their code on a case sensitive partition.\n\n#### DefinePlugin\n\n`node` and `web` - Allows the definition of constants at build time. We currently provide the\nfollowing constants:\n\n- `process.env.NODE_ENV` - The value of `NODE_ENV`\n- `process.env.WATCH`    - Is set to `true` when using the `kaliber-watch` command\n\n#### ProvidePlugin\n\n`node` and `web` - Never type the following imports:\n\n- `import React from 'react'`\n- `import { Component } from 'react'`\n\nThey are provided.\n\n#### sourceMapPlugin\n\n`node` and `web` - Custom plugin that creates real source maps when available.\n\n#### TimeFixPlugin\n\n`node` - You don't want to know.\n\n#### ExtendedAPIPlugin\n\n`node` - Provides `__webpack_chunk_name__` and `__webpack_hash__` variables.\n\n#### configLoaderPlugin\n\n`node` - Custom plugin that allows you to import `@kaliber/config`.\n\n#### watchContextPlugin\n\n`node` - Custom plugin that ensures all files in `src/` are watched for changes.\n\n#### reactUniversalPlugin\n\n`node` - Custom plugin that is responsible for spawning a `web` compiler that is used for compiling\n`*.entry.js` and `*.js?universal` resources.\n\nWhen it encounters a universal resource, the resource is duplicated and compiled by both the `node`\nand the `web` compiler. It's quite performant because it reuses any non-js module that was already\ncompiled with the `node` compiler.\n\nIt is also responsible for providing the `entry-manifest.json` file.\n\n#### templatePlugin\n\n`node` - Custom plugin that allows for configured template renderes to render static and dynamic\ntemplates that follow the `{name}.{type}.{ext}` file name pattern.\n\n#### mergeCssPlugin\n\n`node` - Custom plugin that merges CSS and also splits chunks for shared CSS files. It is also\nresponsible for providing the `css-manifest.json` file.\n\n#### copyUnusedFilesPlugin\n\n`node` - Custom plugin that copies all unused files in `src/` to `target/`.\n\n#### hotCssReplacementPlugin\n\n`node` - Custom plugin that is only used for the `kaliber-watch` command that communicates CSS\nchanges to the client.\n\n#### chunkManifestPlugin\n\n`web` - Custom plugin responsible for providing the `chunk-manifest.json` file.\n\n#### hotModuleReplacementPlugin\n\n`web` - Custom plugin that is only used for the `kaliber-watch` command that communicates javascript\nchanges to the client.\n\n#### SplitChunksPlugin\n\n`web` - Supplied by Webpack, splits shared chunks into bundles.\n\n#### UglifyJsPlugin\n\n`web` - Only used when `NODE_ENV=production`, minifies the javascript and removes unused code.\n\n### Resolver plugins\n\nWebpack allows custom resolvers to influence the way files are resolved. Only `*.js` resources can\nbe loaded without adding an extension. All other types of resources need to be imported using their\nextension.\n\nAlso note that we only use `node_modules` as module directory.\n\n#### absolutePathResolverPlugin\n\nCustom resolver that allows absolute imports where `/` indicates the `src/` directory.\n\n#### fragmentResolverPlugin\n\nCustom resolver that allows imports of files including a fragment, for example: `johny.svg#head`.\n"},function(e,n){e.exports="## Advanced\n\nWithin the various webpack plugins and loaders as well as the provided library files we use some\nadvanced techniques. It's is generally not a smart idea to use these techniques, but sometimes it's\nthe only way to go.\n\n{toc}\n\n### Variables\n\nWebpack plugins are allowed to add special variables. This section contains a list of these\nvariables. Note that these might change between versions.\n\nIt is very rare to see these in ordinary modules. They are most common in webpack loaders and, for\nthis particular library, in template renderers.\n\n| Variable                             | Source                         | Description                                                     |\n| :--------                            | :------                        | :-----------                                                    |\n| \\_\\_webpack_css_chunk_hashes\\_\\_     | merge-css-plugin               | An array with the hashes of the CSS files for the current chunk |\n| \\_\\_webpack_js_chunk_information\\_\\_ | react-universal-plugin         | An object with information about the JavaScript chunks          |\n| \\_\\_webpack_websocket_port\\_\\_       | websocket-communication-plugin | The port number at which the webpack build will communicate     |\n| \\_\\_webpack_chunk_name\\_\\_           | ExtendedAPIPlugin              | The name of the current chunk                                   |\n| \\_\\_webpack_hash\\_\\_                 | HotModuleReplacementPlugin or ExtendedAPIPlugin | Hash of the compilation                        |\n| \\_\\_webpack_public_path\\_\\_          | Webpack                        | The publicPath setting, in most applications it's better to grab it from the configuration to make your code more portable |\n"},function(e,n){e.exports="## Template renderers\n\nThe concept of template renderers is both simple and powerful. It allows you to use javascript to\ngenerate other types of files.\n\nWe make a distinction between static and dynamic templates. Static templates are rendered during the\nbuild and dynamic templates will be turned into function that can be executed by node.js.\n\nAnother distinction can be make by looking at the output, given a `{name}.{type}.js` file:\n- a static template would result in a `{name}.type` file.\n- a dynamic template would result in a `{name}.type.js` file.\n\n{toc}\n\n### Registration\n\nTo register a custom template renderer for a specific type you add it to the configuration:\n\n```js\nmodule.exports = {\n  kaliber: {\n    templateRenderers: {\n      myType: '/my-type-renderer'\n    }\n  }\n}\n```\n\nThis tells the build system to use `src/my-type-renderer` for all `*.myType.js` files.\n\n### Creation\n\nA template renderer has a very simple signature: `any => string` where the argument passed in is the\ncontent of the template and the result is the string that is stored in the file.\n\nAs an example, the renderer we use for the `*.html.js` files:\n\n```js\nconst ReactDOMServer = require('react-dom/server')\nconst { isElement } = require('react-dom/test-utils')\n\nmodule.exports = function htmlReactRenderer(template) {\n  if (!isElement(template)) return template\n  return '<!DOCTYPE html>\\n' + ReactDOMServer.renderToStaticMarkup(template)\n}\n```\n\nThis renderer assumes that the template is a React element.\n\nAnother example, this time for `*.json.js` files:\n\n```js\nmodule.exports = function jsonRenderer(template) {\n  return JSON.stringify(template)\n}\n```\n\nThis renderer expects any javascript value as template.\n\n### Usage\n\nAs we have stated, we make a distinction between static and dynamic templates. The convention to\nswitch between a static and dynamic template is very simple:\n\n- If you export a non-function it will be treated as a static template\n- If you export a function from a template it is treated as a dynamic template\n\n#### Static\n\nStatic templates are transformed at build type from `{name}.{type}.js` to `{name}.{type}.js`.\n\nA static html template:\n\n`src/index.html.js`\n```jsx\nexport default (\n  <html>\n    <head />\n    <body>Hello world!</body>\n  </html>\n)\n```\nResults in a `target/index.html` file.\n\n\nA static json template:\n\n`src/test.json.js`\n```js\nexport default {\n  hello: 'World!'\n}\n```\nResults in a `target/test.json` file.\n\n\n#### Dynamic\n\nAt build time dynamic templates are wrapped / replaced by another function like this:\n\n```js\nimport template from '...'\nimport templateRenderer from '...'\n\nexport default function wrappedTemplate(props) {\n  return templateRenderer(template(props))\n}\n```\n\nThis means that `{name}.{type}.js` is transformed but outputted with the same name.\n\nA dynamic html template:\n\n`src/index.html.js`\n```jsx\nexport default function index({ title, content }) {\n  return (\n    <html>\n      <head><title>{title}</title></head>\n      <body>\n        <h1>{title}</h1>\n        <p>{content}</p>\n      </body>\n    </div>\n  )\n}\n```\nResults in a `target/index.html.js` file that contains a function which, given a `title` and\n`content`, returns an html string.\n\nA dynamic json template:\n\n`src/test.json.js`\n```js\nexport default function test({ message }) {\n  return { message }\n}\n```\nResults in a `target/test.json.js` file that contains a function which, given a `message`, returns\na json string containing an object with the message.\n\n"},function(e,n){e.exports="## Important changes\n\n{toc}\n\n### Breaking changes\n\n- v0.0.77 - css `color()` function is now `color-mod()`\n- v0.0.71 - server side rendered polyfills (`withPolyfill`) have been removed\n- v0.0.63 - `raw` is no longer accepted as a template type\n- v0.0.60 - setting `CONFIG_ENV` is now required.\n- v0.0.54 - `chunk-manifest.json` changed.\n- v0.0.51 -\n  - `chunk-manifest.json` changed.\n  - `*.entry.css` classnames are no longer hashed.\n  - CommonJS modules imported with async `import()` are wrapped into the default export (`await import('flickity')` becomes `await import('flickity').default`).\n- v0.0.47 - Universal apps no longer have an extra `<div />` around the root-app-node and the script-tag.\n- v0.0.44 - `*.entry.css` filenames are now also hashed, use `css-manifest.json` to obtain the filenames\n- v0.0.41 - `*.*.js` are no longer all treated as templates, by default only `.html.js`, `.txt.js` and `.json.js` are considered\n- v0.0.40 - `src` is no longer treated as `node_modules`, use absolute paths (`/x`) to retrieve modules from subdirectories\n- v0.0.40 - Javascripts are now hashes, they require an additional import to load\n- v0.0.35 - Stylesheets are now hashes, they require an additional import to load\n\n### New features\n\n- ? - `*.raw.*` sources are now loaded using the `raw-loader`\n- v0.0.58 - `ExtendedAPIPlugin` is now also used in the web compiler\n- v0.0.56 - all sub directories of `src/` are being watched\n- v0.0.54 - universal components can be rendered more than once on the same page\n"},function(e,n){e.exports="## Server\n\nThis library comes with a node.js express server that can be used both for development and\nproduction. It's very light weight and intentionally kept quite simple.\n\nYou free to use any server you like. There are no dependencies from the build tool to the server.\n\nA high level overview of the express modules and handlers we have defined:\n\n- `helmet` - Helmet helps secure the express app\n- `compression` - Makes sure all responses are compressed\n- configured `serveMiddleware` - Taken from the configuration to allow you to customize behavior\n- `express.static` - Serves any file as a static file if it exists.\n- `index.html.js` handler - If `index.html.js` exists, it will be used for all requests\n- `404.html` handler - If `404.html` exists, it will be served if no route matched\n- `index.html` handler - If `index.html` exists, it will be used for all requests\n- `500.html` handler - If `500.html` exists and `NODE_ENV=production`, it will be served if an error was caught\n\n{toc}\n\n### Project types\n\n- `index.html.js` - [Server side rendering](/server-side-rendering) (might render a single page application)\n- `index.html`, `404.html` and `500.html` - [Static site](/how-to/static-site)\n- `index.html` - [Single page application](/how-to/single-page-application)\n\n### File resolution\n\n- If a file exists: serve using `express.static`\n- If not, look for `index.html.js` and serve that\n- If not, look for `404.html` and serve that\n- If not, look for `index.html` and serve that\n\nThis proces is repeated for each directory in the path. So if the path is `/a/b/something`, the server first\nlooks for these files in `/a/b/`, then in `/a/` and finally in `/` .\n\n### Port\n\nThe server starts at the port defined by the environment variable named `PORT`.\n\n### Middleware\n\nCustom middleware can be configured with the following configuration setting:\n\n```js\nmodule.exports = {\n  kaliber: {\n    serveMiddleware: ...\n  }\n}\n```\n\nThis setting is used as follows: `app.use(...[].concat(serveMiddleware))`\n\n### Helmet\n\nBy default we have the `hsts` setting set to `false` because SSL offloading (and setting the `hsts`\nheaders) is done (in our case) by the load balancer. Because this is not the case for every hosting\nservice we allow you to adjust the configuration:\n\n```js\nmodule.exports = {\n  kaliber: {\n    helmetOptions: { ... }\n  }\n}\n```\n\n### `index.html.js`\n\nThe dynamic `index.html.js` template is special to our server. It checks if the exported function\nhas a `routes` property and will then execute its `match` function. The result of the `match`\nfunction is used to determine the `status`, `headers` and `data` for the given request.\n\n```js\nindex.routes = {\n  match: async (location, req) => ({ status, headers, data })\n}\n```\n\nThe `location` and `data` are then fed back into the dynamic template.\n\n```js\nexport default function index({ location, data }) {\n  return ...\n}\n```\n"},function(e,n,t){"use strict";(function(e){t.d(n,"a",(function(){return i}));var o=t(9);function a(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var t=[],o=!0,a=!1,r=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){a=!0,r=e}finally{try{o||null==s.return||s.return()}finally{if(a)throw r}}return t}(e,n)||function(e,n){if(!e)return;if("string"==typeof e)return r(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(t);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return r(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}function i(n){var t=n.pages,r=n.page;return e.createElement("ul",null,t.map((function(n){var t=a(n,3),i=t[0],s=t[1],l=t[2];return e.createElement("li",{key:i},Array.isArray(l)?e.createElement(e.Fragment,null,s,e.createElement("ul",null,l.map((function(n){var t=a(n,2),s=t[0],l=t[1];return e.createElement("li",{key:s},e.createElement(o.a,{to:"/".concat(i,"/").concat(s),title:l,active:r==="".concat(i,"/").concat(s)}))})))):e.createElement(o.a,{to:"/".concat(i),title:s,active:r===i}))})))}}).call(this,t(0))},function(e,n,t){"use strict";(function(e){t.d(n,"a",(function(){return a}));var o=t(64);function a(n){var t=n.children;return"string"==typeof t?e.createElement(o.a,null,t):t}}).call(this,t(0))},function(e,n,t){"use strict";(function(e){t.d(n,"a",(function(){return c}));var o=t(65),a=t.n(o),r=t(66),i=t(9);function s(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var t=[],o=!0,a=!1,r=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){a=!0,r=e}finally{try{o||null==s.return||s.return()}finally{if(a)throw r}}return t}(e,n)||function(e,n){if(!e)return;if("string"==typeof e)return l(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(t);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return l(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}function c(n){var t=n.children;return e.createElement(a.a,{source:t,renderers:{root:u,code:r.a,heading:h,link:d}})}function d(n){var t=n.href,o=n.children;return t.startsWith("/")?e.createElement(i.a,{to:t,title:e.Children.only(e.createElement(e.Fragment,null,o))}):e.createElement("a",{href:t},o)}function h(n){var t=n.level,o=n.children,a=s(o,1)[0],r={id:h.id(a)};return e.createElement("h".concat(t),r,o)}function u(n){var t=n.children,o=[];return e.createElement(e.Fragment,null,e.Children.map(t,(function(n){if("p"===n.type&&"{toc}"===s(n.props.children,1)[0].props.value)return e.createElement(a,null);return n.type===h&&o.push(n.props),n})));function a(){return e.createElement(n,{list:o});function n(n){var t=n.list;return e.createElement(e.Fragment,null,e.createElement("p",null,e.createElement("strong",null,"On this page:")),t.filter((function(e){return e.level>=3})).map((function(n,t){var o=n.level,a=s(n.children,1)[0],r=h.id(a);return e.createElement(e.Fragment,{key:r+t},e.createElement("a",{style:{paddingLeft:10*(o-3)+"px"},href:"#"+encodeURIComponent(r)},a),e.createElement("br",null))})))}}}h.id=function(e){return("string"==typeof e?e:e.props.children).toLowerCase().replace(/ /g,"-")}}).call(this,t(0))},,function(e,n,t){"use strict";(function(e){t.d(n,"a",(function(){return j}));var o=t(5),a=t.n(o),r=t(73),i=t.n(r),s=t(67),l=t.n(s),c=t(68),d=t.n(c),h=t(69),u=t.n(h),p=t(70),m=t.n(p),f=t(71),y=t.n(f),g=t(72),b=t.n(g);function w(){return(w=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function v(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}function j(n){var t=n.language,o=n.value,r=v(n,["language","value"]);return e.createElement(a.a,w({language:t,style:i.a},r),o)}a.a.registerLanguage("js",l.a),a.a.registerLanguage("css",d.a),a.a.registerLanguage("jsx",u.a),a.a.registerLanguage("php",m.a),a.a.registerLanguage("markup-templating",y.a),a.a.registerLanguage("json",b.a)}).call(this,t(0))},,,,,,,,,function(e,n,t){"use strict";t.r(n),function(e){for(var n=t(52),o=t(74),a=document.querySelectorAll('*[data-componentid="App_js"]'),r=0;r<a.length;r++){var i=JSON.parse(a[r].dataset.props);Object(o.hydrate)(e.createElement(n.a,i),a[r])}}.call(this,t(0))}],[[75,1,2]]]);
//# sourceMappingURL=0.549f51b39f3e4d884e10.js.map
